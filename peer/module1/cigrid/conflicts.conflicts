
** Conflict (reduce/reduce) in state 152.
** Tokens involved: PLUS MIN
** The following explanations concentrate on token PLUS.
** This state is reached from program after reading:

ty IDENT LPAREN params RPAREN LBRACE LBRACE IDENT LBRACKET expr RBRACKET option(attr)

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT LPAREN params RPAREN LBRACE list(stmt) RBRACE 
                                     stmt list(stmt) 
                                     (?)

** In state 152, looking ahead at PLUS, reducing production
** expr -> IDENT LBRACKET expr RBRACKET option(attr)
** is permitted because of the following sub-derivation:

LBRACE expr RBRACE 
       expr PLUS expr // lookahead token appears
       IDENT LBRACKET expr RBRACKET option(attr) . 

** In state 152, looking ahead at PLUS, reducing production
** lvalue -> IDENT LBRACKET expr RBRACKET option(attr)
** is permitted because of the following sub-derivation:

LBRACE list(stmt) RBRACE 
       stmt list(stmt) 
       varassign SEMI 
       assign 
       lvalue PLUS PLUS // lookahead token appears
       IDENT LBRACKET expr RBRACKET option(attr) . 

** Conflict (reduce/reduce) in state 145.
** Tokens involved: STAR PLUS MIN
** The following explanations concentrate on token STAR.
** This state is reached from program after reading:

ty IDENT LPAREN params RPAREN LBRACE LBRACE IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT LPAREN params RPAREN LBRACE list(stmt) RBRACE 
                                     stmt list(stmt) 
                                     (?)

** In state 145, looking ahead at STAR, reducing production
** expr -> IDENT
** is permitted because of the following sub-derivation:

LBRACE expr RBRACE 
       expr STAR expr // lookahead token appears
       IDENT . 

** In state 145, looking ahead at STAR, reducing production
** ty -> IDENT
** is permitted because of the following sub-derivation:

LBRACE list(stmt) RBRACE 
       stmt list(stmt) 
       varassign SEMI 
       ty IDENT EQUAL expr 
       ty STAR // lookahead token appears
       IDENT . 

** Conflict (shift/reduce) in state 132.
** Token involved: ELSE
** This state is reached from program after reading:

ty IDENT LPAREN params RPAREN LBRACE IF LPAREN expr RPAREN IF LPAREN expr RPAREN stmt

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT LPAREN params RPAREN LBRACE list(stmt) RBRACE 
                                     stmt list(stmt) 
                                     (?)

** In state 132, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expr RPAREN stmt option(else_stmt) 
                      IF LPAREN expr RPAREN stmt option(else_stmt) 
                                                 else_stmt 
                                                 . ELSE stmt 

** In state 132, looking ahead at ELSE, reducing production
** option(else_stmt) ->
** is permitted because of the following sub-derivation:

IF LPAREN expr RPAREN stmt option(else_stmt) // lookahead token appears because option(else_stmt) can begin with ELSE
                      IF LPAREN expr RPAREN stmt option(else_stmt) // lookahead token is inherited
                                                 . 

** Conflict (shift/reduce) in state 88.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr AND expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 88, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr AND expr 
         expr . SMALLER expr 

** In state 88, looking ahead at SMALLER, reducing production
** expr -> expr AND expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr AND expr . 

** Conflict (shift/reduce) in state 86.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr BAND expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 86, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr BAND expr 
          expr . SMALLER expr 

** In state 86, looking ahead at SMALLER, reducing production
** expr -> expr BAND expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr BAND expr . 

** Conflict (shift/reduce) in state 84.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr BOR expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 84, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr BOR expr 
         expr . SMALLER expr 

** In state 84, looking ahead at SMALLER, reducing production
** expr -> expr BOR expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr BOR expr . 

** Conflict (shift/reduce) in state 82.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr OR expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 82, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr OR expr 
        expr . SMALLER expr 

** In state 82, looking ahead at SMALLER, reducing production
** expr -> expr OR expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr OR expr . 

** Conflict (shift/reduce) in state 75.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr COMPARE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 75, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr COMPARE expr 
             expr . SMALLER expr 

** In state 75, looking ahead at SMALLER, reducing production
** expr -> expr COMPARE expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr COMPARE expr . 

** Conflict (shift/reduce) in state 73.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr GEQ expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 73, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr GEQ expr 
         expr . SMALLER expr 

** In state 73, looking ahead at SMALLER, reducing production
** expr -> expr GEQ expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr GEQ expr . 

** Conflict (shift/reduce) in state 71.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr GREATER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 71, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr GREATER expr 
             expr . SMALLER expr 

** In state 71, looking ahead at SMALLER, reducing production
** expr -> expr GREATER expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr GREATER expr . 

** Conflict (shift/reduce) in state 69.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr LEQ expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 69, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr LEQ expr 
         expr . SMALLER expr 

** In state 69, looking ahead at SMALLER, reducing production
** expr -> expr LEQ expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr LEQ expr . 

** Conflict (shift/reduce) in state 67.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr LSHIFT expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 67, looking ahead at SMALLER, reducing production
** expr -> expr LSHIFT expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr LSHIFT expr . 

** In state 67, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr LSHIFT expr 
            expr . SMALLER expr 

** Conflict (shift/reduce) in state 65.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr MIN expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 65, looking ahead at SMALLER, reducing production
** expr -> expr MIN expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr MIN expr . 

** In state 65, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr MIN expr 
         expr . SMALLER expr 

** Conflict (shift/reduce) in state 63.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr NEQ expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 63, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr NEQ expr 
         expr . SMALLER expr 

** In state 63, looking ahead at SMALLER, reducing production
** expr -> expr NEQ expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr NEQ expr . 

** Conflict (shift/reduce) in state 61.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr PERCENT expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 61, looking ahead at SMALLER, reducing production
** expr -> expr PERCENT expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr PERCENT expr . 

** In state 61, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr PERCENT expr 
             expr . SMALLER expr 

** Conflict (shift/reduce) in state 59.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr PLUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 59, looking ahead at SMALLER, reducing production
** expr -> expr PLUS expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr PLUS expr . 

** In state 59, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr PLUS expr 
          expr . SMALLER expr 

** Conflict (shift/reduce) in state 57.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr RSHIFT expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 57, looking ahead at SMALLER, reducing production
** expr -> expr RSHIFT expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr RSHIFT expr . 

** In state 57, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr RSHIFT expr 
            expr . SMALLER expr 

** Conflict (shift/reduce) in state 55.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr SLASH expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 55, looking ahead at SMALLER, reducing production
** expr -> expr SLASH expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr SLASH expr . 

** In state 55, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr SLASH expr 
           expr . SMALLER expr 

** Conflict (shift/reduce) in state 53.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr STAR expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 53, looking ahead at SMALLER, reducing production
** expr -> expr STAR expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr STAR expr . 

** In state 53, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr STAR expr 
          expr . SMALLER expr 

** Conflict (shift/reduce) in state 51.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL expr SMALLER expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 51, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

expr SMALLER expr 
             expr . SMALLER expr 

** In state 51, looking ahead at SMALLER, reducing production
** expr -> expr SMALLER expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
expr SMALLER expr . 

** Conflict (shift/reduce) in state 49.
** Tokens involved: SMALLER RSHIFT PERCENT NEQ LSHIFT LEQ GREATER GEQ COMPARE
** The following explanations concentrate on token SMALLER.
** This state is reached from program after reading:

ty IDENT EQUAL unop expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
ty IDENT EQUAL expr SEMI 
               (?)

** In state 49, looking ahead at SMALLER, shifting is permitted
** because of the following sub-derivation:

unop expr 
     expr . SMALLER expr 

** In state 49, looking ahead at SMALLER, reducing production
** expr -> unop expr
** is permitted because of the following sub-derivation:

expr SMALLER expr // lookahead token appears
unop expr . 
