
** Conflict (shift/reduce) in state 98.
** Token involved: ELSE
** This state is reached from program after reading:

typ IDENT LPAREN params RPAREN LCURLY IF LPAREN expr RPAREN IF LPAREN expr RPAREN stmt

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
typ IDENT LPAREN params RPAREN LCURLY list(stmt) RCURLY 
                                      stmt list(stmt) 
                                      (?)

** In state 98, looking ahead at ELSE, shifting is permitted
** because of the following sub-derivation:

IF LPAREN expr RPAREN stmt ELSE stmt 
                      IF LPAREN expr RPAREN stmt . ELSE stmt 

** In state 98, looking ahead at ELSE, reducing production
** stmt -> IF LPAREN expr RPAREN stmt
** is permitted because of the following sub-derivation:

IF LPAREN expr RPAREN stmt ELSE stmt // lookahead token appears
                      IF LPAREN expr RPAREN stmt . 

** Conflict (shift/reduce) in state 74.
** Tokens involved: SUB OR NEQ MUL MOD LTEQ LT GTEQ GT EQ DIV BITOR BITAND AND ADD
** The following explanations concentrate on token SUB.
** This state is reached from program after reading:

typ IDENT LPAREN params RPAREN LCURLY RETURN UMINUS expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
typ IDENT LPAREN params RPAREN LCURLY list(stmt) RCURLY 
                                      stmt list(stmt) 
                                      RETURN option(expr) SEMICOLON 
                                             expr 
                                             (?)

** In state 74, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

UMINUS expr 
       expr . SUB expr 

** In state 74, looking ahead at SUB, reducing production
** expr -> UMINUS expr
** is permitted because of the following sub-derivation:

expr SUB expr // lookahead token appears
UMINUS expr . 

** Conflict (shift/reduce) in state 73.
** Tokens involved: SUB OR NEQ MUL MOD LTEQ LT GTEQ GT EQ DIV BITOR BITAND AND ADD
** The following explanations concentrate on token SUB.
** This state is reached from program after reading:

typ IDENT LPAREN params RPAREN LCURLY RETURN TILDE expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
typ IDENT LPAREN params RPAREN LCURLY list(stmt) RCURLY 
                                      stmt list(stmt) 
                                      RETURN option(expr) SEMICOLON 
                                             expr 
                                             (?)

** In state 73, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

TILDE expr 
      expr . SUB expr 

** In state 73, looking ahead at SUB, reducing production
** expr -> TILDE expr
** is permitted because of the following sub-derivation:

expr SUB expr // lookahead token appears
TILDE expr . 

** Conflict (shift/reduce) in state 72.
** Tokens involved: SUB OR NEQ MUL MOD LTEQ LT GTEQ GT EQ DIV BITOR BITAND AND ADD
** The following explanations concentrate on token SUB.
** This state is reached from program after reading:

typ IDENT LPAREN params RPAREN LCURLY RETURN NOT expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

program 
list(global) EOF 
global list(global) 
typ IDENT LPAREN params RPAREN LCURLY list(stmt) RCURLY 
                                      stmt list(stmt) 
                                      RETURN option(expr) SEMICOLON 
                                             expr 
                                             (?)

** In state 72, looking ahead at SUB, shifting is permitted
** because of the following sub-derivation:

NOT expr 
    expr . SUB expr 

** In state 72, looking ahead at SUB, reducing production
** expr -> NOT expr
** is permitted because of the following sub-derivation:

expr SUB expr // lookahead token appears
NOT expr . 
